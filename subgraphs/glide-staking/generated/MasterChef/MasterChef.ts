// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Deposit extends ethereum.Event {
  get params(): Deposit__Params {
    return new Deposit__Params(this);
  }
}

export class Deposit__Params {
  _event: Deposit;

  constructor(event: Deposit) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get pid(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class EmergencyWithdraw extends ethereum.Event {
  get params(): EmergencyWithdraw__Params {
    return new EmergencyWithdraw__Params(this);
  }
}

export class EmergencyWithdraw__Params {
  _event: EmergencyWithdraw;

  constructor(event: EmergencyWithdraw) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get pid(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class SetGlideTransferOwner extends ethereum.Event {
  get params(): SetGlideTransferOwner__Params {
    return new SetGlideTransferOwner__Params(this);
  }
}

export class SetGlideTransferOwner__Params {
  _event: SetGlideTransferOwner;

  constructor(event: SetGlideTransferOwner) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get glideTransferOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class TransferGlideOwnership extends ethereum.Event {
  get params(): TransferGlideOwnership__Params {
    return new TransferGlideOwnership__Params(this);
  }
}

export class TransferGlideOwnership__Params {
  _event: TransferGlideOwnership;

  constructor(event: TransferGlideOwnership) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class UpdateEmissionRate extends ethereum.Event {
  get params(): UpdateEmissionRate__Params {
    return new UpdateEmissionRate__Params(this);
  }
}

export class UpdateEmissionRate__Params {
  _event: UpdateEmissionRate;

  constructor(event: UpdateEmissionRate) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get glidePerBlock(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Withdraw extends ethereum.Event {
  get params(): Withdraw__Params {
    return new Withdraw__Params(this);
  }
}

export class Withdraw__Params {
  _event: Withdraw;

  constructor(event: Withdraw) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get pid(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class MasterChef__poolInfoResult {
  value0: Address;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;

  constructor(
    value0: Address,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    return map;
  }
}

export class MasterChef__userInfoResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class MasterChef extends ethereum.SmartContract {
  static bind(address: Address): MasterChef {
    return new MasterChef("MasterChef", address);
  }

  MAX_ALLOC_POINT(): BigInt {
    let result = super.call(
      "MAX_ALLOC_POINT",
      "MAX_ALLOC_POINT():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_MAX_ALLOC_POINT(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "MAX_ALLOC_POINT",
      "MAX_ALLOC_POINT():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  MAX_EMISSION_RATE(): BigInt {
    let result = super.call(
      "MAX_EMISSION_RATE",
      "MAX_EMISSION_RATE():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_MAX_EMISSION_RATE(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "MAX_EMISSION_RATE",
      "MAX_EMISSION_RATE():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  bonusPeriod(): BigInt {
    let result = super.call("bonusPeriod", "bonusPeriod():(uint256)", []);

    return result[0].toBigInt();
  }

  try_bonusPeriod(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("bonusPeriod", "bonusPeriod():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  devaddr(): Address {
    let result = super.call("devaddr", "devaddr():(address)", []);

    return result[0].toAddress();
  }

  try_devaddr(): ethereum.CallResult<Address> {
    let result = super.tryCall("devaddr", "devaddr():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  glide(): Address {
    let result = super.call("glide", "glide():(address)", []);

    return result[0].toAddress();
  }

  try_glide(): ethereum.CallResult<Address> {
    let result = super.tryCall("glide", "glide():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  glidePerBlock(): BigInt {
    let result = super.call("glidePerBlock", "glidePerBlock():(uint256)", []);

    return result[0].toBigInt();
  }

  try_glidePerBlock(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "glidePerBlock",
      "glidePerBlock():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  glideTransferOwner(): Address {
    let result = super.call(
      "glideTransferOwner",
      "glideTransferOwner():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_glideTransferOwner(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "glideTransferOwner",
      "glideTransferOwner():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  poolExistence(param0: Address): boolean {
    let result = super.call("poolExistence", "poolExistence(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBoolean();
  }

  try_poolExistence(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "poolExistence",
      "poolExistence(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  poolInfo(param0: BigInt): MasterChef__poolInfoResult {
    let result = super.call(
      "poolInfo",
      "poolInfo(uint256):(address,uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new MasterChef__poolInfoResult(
      result[0].toAddress(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt()
    );
  }

  try_poolInfo(
    param0: BigInt
  ): ethereum.CallResult<MasterChef__poolInfoResult> {
    let result = super.tryCall(
      "poolInfo",
      "poolInfo(uint256):(address,uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new MasterChef__poolInfoResult(
        value[0].toAddress(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt()
      )
    );
  }

  reductionPeriod(): BigInt {
    let result = super.call(
      "reductionPeriod",
      "reductionPeriod():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_reductionPeriod(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "reductionPeriod",
      "reductionPeriod():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  startBlock(): BigInt {
    let result = super.call("startBlock", "startBlock():(uint256)", []);

    return result[0].toBigInt();
  }

  try_startBlock(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("startBlock", "startBlock():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  sugar(): Address {
    let result = super.call("sugar", "sugar():(address)", []);

    return result[0].toAddress();
  }

  try_sugar(): ethereum.CallResult<Address> {
    let result = super.tryCall("sugar", "sugar():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  totalAllocPoint(): BigInt {
    let result = super.call(
      "totalAllocPoint",
      "totalAllocPoint():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_totalAllocPoint(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalAllocPoint",
      "totalAllocPoint():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  treasuryaddr(): Address {
    let result = super.call("treasuryaddr", "treasuryaddr():(address)", []);

    return result[0].toAddress();
  }

  try_treasuryaddr(): ethereum.CallResult<Address> {
    let result = super.tryCall("treasuryaddr", "treasuryaddr():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  userInfo(param0: BigInt, param1: Address): MasterChef__userInfoResult {
    let result = super.call(
      "userInfo",
      "userInfo(uint256,address):(uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromAddress(param1)
      ]
    );

    return new MasterChef__userInfoResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_userInfo(
    param0: BigInt,
    param1: Address
  ): ethereum.CallResult<MasterChef__userInfoResult> {
    let result = super.tryCall(
      "userInfo",
      "userInfo(uint256,address):(uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromAddress(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new MasterChef__userInfoResult(value[0].toBigInt(), value[1].toBigInt())
    );
  }

  poolLength(): BigInt {
    let result = super.call("poolLength", "poolLength():(uint256)", []);

    return result[0].toBigInt();
  }

  try_poolLength(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("poolLength", "poolLength():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  phase(blockNumber: BigInt): BigInt {
    let result = super.call("phase", "phase(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(blockNumber)
    ]);

    return result[0].toBigInt();
  }

  try_phase(blockNumber: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("phase", "phase(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(blockNumber)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  phase1(): BigInt {
    let result = super.call("phase", "phase():(uint256)", []);

    return result[0].toBigInt();
  }

  try_phase1(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("phase", "phase():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  rewardPerPhase(phaseNumber: BigInt): BigInt {
    let result = super.call(
      "rewardPerPhase",
      "rewardPerPhase(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(phaseNumber)]
    );

    return result[0].toBigInt();
  }

  try_rewardPerPhase(phaseNumber: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "rewardPerPhase",
      "rewardPerPhase(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(phaseNumber)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  reward(): BigInt {
    let result = super.call("reward", "reward():(uint256)", []);

    return result[0].toBigInt();
  }

  try_reward(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("reward", "reward():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  reward1(blockNumber: BigInt): BigInt {
    let result = super.call("reward", "reward(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(blockNumber)
    ]);

    return result[0].toBigInt();
  }

  try_reward1(blockNumber: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("reward", "reward(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(blockNumber)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTotalGlideReward(_lastRewardBlock: BigInt, _blockNumber: BigInt): BigInt {
    let result = super.call(
      "getTotalGlideReward",
      "getTotalGlideReward(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_lastRewardBlock),
        ethereum.Value.fromUnsignedBigInt(_blockNumber)
      ]
    );

    return result[0].toBigInt();
  }

  try_getTotalGlideReward(
    _lastRewardBlock: BigInt,
    _blockNumber: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTotalGlideReward",
      "getTotalGlideReward(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_lastRewardBlock),
        ethereum.Value.fromUnsignedBigInt(_blockNumber)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getGlideReward(_lastRewardBlock: BigInt): BigInt {
    let result = super.call(
      "getGlideReward",
      "getGlideReward(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_lastRewardBlock)]
    );

    return result[0].toBigInt();
  }

  try_getGlideReward(_lastRewardBlock: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getGlideReward",
      "getGlideReward(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_lastRewardBlock)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  pendingGlide(_pid: BigInt, _user: Address): BigInt {
    let result = super.call(
      "pendingGlide",
      "pendingGlide(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_pid),
        ethereum.Value.fromAddress(_user)
      ]
    );

    return result[0].toBigInt();
  }

  try_pendingGlide(_pid: BigInt, _user: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "pendingGlide",
      "pendingGlide(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_pid),
        ethereum.Value.fromAddress(_user)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _glide(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _sugar(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _devaddr(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _treasuryaddr(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _glidePerBlock(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get _startBlock(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get _glideTransferOwner(): Address {
    return this._call.inputValues[6].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class AddCall extends ethereum.Call {
  get inputs(): AddCall__Inputs {
    return new AddCall__Inputs(this);
  }

  get outputs(): AddCall__Outputs {
    return new AddCall__Outputs(this);
  }
}

export class AddCall__Inputs {
  _call: AddCall;

  constructor(call: AddCall) {
    this._call = call;
  }

  get _allocPoint(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _lpToken(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _withUpdate(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }
}

export class AddCall__Outputs {
  _call: AddCall;

  constructor(call: AddCall) {
    this._call = call;
  }
}

export class SetCall extends ethereum.Call {
  get inputs(): SetCall__Inputs {
    return new SetCall__Inputs(this);
  }

  get outputs(): SetCall__Outputs {
    return new SetCall__Outputs(this);
  }
}

export class SetCall__Inputs {
  _call: SetCall;

  constructor(call: SetCall) {
    this._call = call;
  }

  get _pid(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _allocPoint(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _withUpdate(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }
}

export class SetCall__Outputs {
  _call: SetCall;

  constructor(call: SetCall) {
    this._call = call;
  }
}

export class MassUpdatePoolsCall extends ethereum.Call {
  get inputs(): MassUpdatePoolsCall__Inputs {
    return new MassUpdatePoolsCall__Inputs(this);
  }

  get outputs(): MassUpdatePoolsCall__Outputs {
    return new MassUpdatePoolsCall__Outputs(this);
  }
}

export class MassUpdatePoolsCall__Inputs {
  _call: MassUpdatePoolsCall;

  constructor(call: MassUpdatePoolsCall) {
    this._call = call;
  }
}

export class MassUpdatePoolsCall__Outputs {
  _call: MassUpdatePoolsCall;

  constructor(call: MassUpdatePoolsCall) {
    this._call = call;
  }
}

export class UpdatePoolCall extends ethereum.Call {
  get inputs(): UpdatePoolCall__Inputs {
    return new UpdatePoolCall__Inputs(this);
  }

  get outputs(): UpdatePoolCall__Outputs {
    return new UpdatePoolCall__Outputs(this);
  }
}

export class UpdatePoolCall__Inputs {
  _call: UpdatePoolCall;

  constructor(call: UpdatePoolCall) {
    this._call = call;
  }

  get _pid(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UpdatePoolCall__Outputs {
  _call: UpdatePoolCall;

  constructor(call: UpdatePoolCall) {
    this._call = call;
  }
}

export class DepositCall extends ethereum.Call {
  get inputs(): DepositCall__Inputs {
    return new DepositCall__Inputs(this);
  }

  get outputs(): DepositCall__Outputs {
    return new DepositCall__Outputs(this);
  }
}

export class DepositCall__Inputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }

  get _pid(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DepositCall__Outputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get _pid(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}

export class EnterStakingCall extends ethereum.Call {
  get inputs(): EnterStakingCall__Inputs {
    return new EnterStakingCall__Inputs(this);
  }

  get outputs(): EnterStakingCall__Outputs {
    return new EnterStakingCall__Outputs(this);
  }
}

export class EnterStakingCall__Inputs {
  _call: EnterStakingCall;

  constructor(call: EnterStakingCall) {
    this._call = call;
  }

  get _amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class EnterStakingCall__Outputs {
  _call: EnterStakingCall;

  constructor(call: EnterStakingCall) {
    this._call = call;
  }
}

export class LeaveStakingCall extends ethereum.Call {
  get inputs(): LeaveStakingCall__Inputs {
    return new LeaveStakingCall__Inputs(this);
  }

  get outputs(): LeaveStakingCall__Outputs {
    return new LeaveStakingCall__Outputs(this);
  }
}

export class LeaveStakingCall__Inputs {
  _call: LeaveStakingCall;

  constructor(call: LeaveStakingCall) {
    this._call = call;
  }

  get _amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class LeaveStakingCall__Outputs {
  _call: LeaveStakingCall;

  constructor(call: LeaveStakingCall) {
    this._call = call;
  }
}

export class EmergencyWithdrawCall extends ethereum.Call {
  get inputs(): EmergencyWithdrawCall__Inputs {
    return new EmergencyWithdrawCall__Inputs(this);
  }

  get outputs(): EmergencyWithdrawCall__Outputs {
    return new EmergencyWithdrawCall__Outputs(this);
  }
}

export class EmergencyWithdrawCall__Inputs {
  _call: EmergencyWithdrawCall;

  constructor(call: EmergencyWithdrawCall) {
    this._call = call;
  }

  get _pid(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class EmergencyWithdrawCall__Outputs {
  _call: EmergencyWithdrawCall;

  constructor(call: EmergencyWithdrawCall) {
    this._call = call;
  }
}

export class SetDevAddressCall extends ethereum.Call {
  get inputs(): SetDevAddressCall__Inputs {
    return new SetDevAddressCall__Inputs(this);
  }

  get outputs(): SetDevAddressCall__Outputs {
    return new SetDevAddressCall__Outputs(this);
  }
}

export class SetDevAddressCall__Inputs {
  _call: SetDevAddressCall;

  constructor(call: SetDevAddressCall) {
    this._call = call;
  }

  get _devaddr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetDevAddressCall__Outputs {
  _call: SetDevAddressCall;

  constructor(call: SetDevAddressCall) {
    this._call = call;
  }
}

export class SetStartBlockCall extends ethereum.Call {
  get inputs(): SetStartBlockCall__Inputs {
    return new SetStartBlockCall__Inputs(this);
  }

  get outputs(): SetStartBlockCall__Outputs {
    return new SetStartBlockCall__Outputs(this);
  }
}

export class SetStartBlockCall__Inputs {
  _call: SetStartBlockCall;

  constructor(call: SetStartBlockCall) {
    this._call = call;
  }

  get _newStartBlock(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetStartBlockCall__Outputs {
  _call: SetStartBlockCall;

  constructor(call: SetStartBlockCall) {
    this._call = call;
  }
}

export class UpdateEmissionRateCall extends ethereum.Call {
  get inputs(): UpdateEmissionRateCall__Inputs {
    return new UpdateEmissionRateCall__Inputs(this);
  }

  get outputs(): UpdateEmissionRateCall__Outputs {
    return new UpdateEmissionRateCall__Outputs(this);
  }
}

export class UpdateEmissionRateCall__Inputs {
  _call: UpdateEmissionRateCall;

  constructor(call: UpdateEmissionRateCall) {
    this._call = call;
  }

  get _glidePerBlock(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UpdateEmissionRateCall__Outputs {
  _call: UpdateEmissionRateCall;

  constructor(call: UpdateEmissionRateCall) {
    this._call = call;
  }
}

export class SetGlideTransferOwnerCall extends ethereum.Call {
  get inputs(): SetGlideTransferOwnerCall__Inputs {
    return new SetGlideTransferOwnerCall__Inputs(this);
  }

  get outputs(): SetGlideTransferOwnerCall__Outputs {
    return new SetGlideTransferOwnerCall__Outputs(this);
  }
}

export class SetGlideTransferOwnerCall__Inputs {
  _call: SetGlideTransferOwnerCall;

  constructor(call: SetGlideTransferOwnerCall) {
    this._call = call;
  }

  get _glideTransferOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetGlideTransferOwnerCall__Outputs {
  _call: SetGlideTransferOwnerCall;

  constructor(call: SetGlideTransferOwnerCall) {
    this._call = call;
  }
}

export class TransferGlideOwnershipCall extends ethereum.Call {
  get inputs(): TransferGlideOwnershipCall__Inputs {
    return new TransferGlideOwnershipCall__Inputs(this);
  }

  get outputs(): TransferGlideOwnershipCall__Outputs {
    return new TransferGlideOwnershipCall__Outputs(this);
  }
}

export class TransferGlideOwnershipCall__Inputs {
  _call: TransferGlideOwnershipCall;

  constructor(call: TransferGlideOwnershipCall) {
    this._call = call;
  }

  get _newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferGlideOwnershipCall__Outputs {
  _call: TransferGlideOwnershipCall;

  constructor(call: TransferGlideOwnershipCall) {
    this._call = call;
  }
}
