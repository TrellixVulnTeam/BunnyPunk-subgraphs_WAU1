// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Deposit extends ethereum.Event {
  get params(): Deposit__Params {
    return new Deposit__Params(this);
  }
}

export class Deposit__Params {
  _event: Deposit;

  constructor(event: Deposit) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get shares(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get lastDepositedTime(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class Harvest extends ethereum.Event {
  get params(): Harvest__Params {
    return new Harvest__Params(this);
  }
}

export class Harvest__Params {
  _event: Harvest;

  constructor(event: Harvest) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get performanceFee(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get callFee(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Pause extends ethereum.Event {
  get params(): Pause__Params {
    return new Pause__Params(this);
  }
}

export class Pause__Params {
  _event: Pause;

  constructor(event: Pause) {
    this._event = event;
  }
}

export class Paused extends ethereum.Event {
  get params(): Paused__Params {
    return new Paused__Params(this);
  }
}

export class Paused__Params {
  _event: Paused;

  constructor(event: Paused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Unpause extends ethereum.Event {
  get params(): Unpause__Params {
    return new Unpause__Params(this);
  }
}

export class Unpause__Params {
  _event: Unpause;

  constructor(event: Unpause) {
    this._event = event;
  }
}

export class Unpaused extends ethereum.Event {
  get params(): Unpaused__Params {
    return new Unpaused__Params(this);
  }
}

export class Unpaused__Params {
  _event: Unpaused;

  constructor(event: Unpaused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Withdraw extends ethereum.Event {
  get params(): Withdraw__Params {
    return new Withdraw__Params(this);
  }
}

export class Withdraw__Params {
  _event: Withdraw;

  constructor(event: Withdraw) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get shares(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class GlideVault__userInfoResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt, value3: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    return map;
  }
}

export class GlideVault extends ethereum.SmartContract {
  static bind(address: Address): GlideVault {
    return new GlideVault("GlideVault", address);
  }

  MAX_CALL_FEE(): BigInt {
    let result = super.call("MAX_CALL_FEE", "MAX_CALL_FEE():(uint256)", []);

    return result[0].toBigInt();
  }

  try_MAX_CALL_FEE(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("MAX_CALL_FEE", "MAX_CALL_FEE():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  MAX_PERFORMANCE_FEE(): BigInt {
    let result = super.call(
      "MAX_PERFORMANCE_FEE",
      "MAX_PERFORMANCE_FEE():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_MAX_PERFORMANCE_FEE(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "MAX_PERFORMANCE_FEE",
      "MAX_PERFORMANCE_FEE():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  MAX_WITHDRAW_FEE(): BigInt {
    let result = super.call(
      "MAX_WITHDRAW_FEE",
      "MAX_WITHDRAW_FEE():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_MAX_WITHDRAW_FEE(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "MAX_WITHDRAW_FEE",
      "MAX_WITHDRAW_FEE():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  MAX_WITHDRAW_FEE_PERIOD(): BigInt {
    let result = super.call(
      "MAX_WITHDRAW_FEE_PERIOD",
      "MAX_WITHDRAW_FEE_PERIOD():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_MAX_WITHDRAW_FEE_PERIOD(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "MAX_WITHDRAW_FEE_PERIOD",
      "MAX_WITHDRAW_FEE_PERIOD():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  admin(): Address {
    let result = super.call("admin", "admin():(address)", []);

    return result[0].toAddress();
  }

  try_admin(): ethereum.CallResult<Address> {
    let result = super.tryCall("admin", "admin():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  callFee(): BigInt {
    let result = super.call("callFee", "callFee():(uint256)", []);

    return result[0].toBigInt();
  }

  try_callFee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("callFee", "callFee():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  lastHarvestedTime(): BigInt {
    let result = super.call(
      "lastHarvestedTime",
      "lastHarvestedTime():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_lastHarvestedTime(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lastHarvestedTime",
      "lastHarvestedTime():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  masterchef(): Address {
    let result = super.call("masterchef", "masterchef():(address)", []);

    return result[0].toAddress();
  }

  try_masterchef(): ethereum.CallResult<Address> {
    let result = super.tryCall("masterchef", "masterchef():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  paused(): boolean {
    let result = super.call("paused", "paused():(bool)", []);

    return result[0].toBoolean();
  }

  try_paused(): ethereum.CallResult<boolean> {
    let result = super.tryCall("paused", "paused():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  performanceFee(): BigInt {
    let result = super.call("performanceFee", "performanceFee():(uint256)", []);

    return result[0].toBigInt();
  }

  try_performanceFee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "performanceFee",
      "performanceFee():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  receiptToken(): Address {
    let result = super.call("receiptToken", "receiptToken():(address)", []);

    return result[0].toAddress();
  }

  try_receiptToken(): ethereum.CallResult<Address> {
    let result = super.tryCall("receiptToken", "receiptToken():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  token(): Address {
    let result = super.call("token", "token():(address)", []);

    return result[0].toAddress();
  }

  try_token(): ethereum.CallResult<Address> {
    let result = super.tryCall("token", "token():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  totalShares(): BigInt {
    let result = super.call("totalShares", "totalShares():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalShares(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalShares", "totalShares():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  treasury(): Address {
    let result = super.call("treasury", "treasury():(address)", []);

    return result[0].toAddress();
  }

  try_treasury(): ethereum.CallResult<Address> {
    let result = super.tryCall("treasury", "treasury():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  userInfo(param0: Address): GlideVault__userInfoResult {
    let result = super.call(
      "userInfo",
      "userInfo(address):(uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return new GlideVault__userInfoResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt()
    );
  }

  try_userInfo(
    param0: Address
  ): ethereum.CallResult<GlideVault__userInfoResult> {
    let result = super.tryCall(
      "userInfo",
      "userInfo(address):(uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new GlideVault__userInfoResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt()
      )
    );
  }

  withdrawFee(): BigInt {
    let result = super.call("withdrawFee", "withdrawFee():(uint256)", []);

    return result[0].toBigInt();
  }

  try_withdrawFee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("withdrawFee", "withdrawFee():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  withdrawFeePeriod(): BigInt {
    let result = super.call(
      "withdrawFeePeriod",
      "withdrawFeePeriod():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_withdrawFeePeriod(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "withdrawFeePeriod",
      "withdrawFeePeriod():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  calculateHarvestGlideRewards(): BigInt {
    let result = super.call(
      "calculateHarvestGlideRewards",
      "calculateHarvestGlideRewards():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_calculateHarvestGlideRewards(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "calculateHarvestGlideRewards",
      "calculateHarvestGlideRewards():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  calculateTotalPendingGlideRewards(): BigInt {
    let result = super.call(
      "calculateTotalPendingGlideRewards",
      "calculateTotalPendingGlideRewards():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_calculateTotalPendingGlideRewards(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "calculateTotalPendingGlideRewards",
      "calculateTotalPendingGlideRewards():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getPricePerFullShare(): BigInt {
    let result = super.call(
      "getPricePerFullShare",
      "getPricePerFullShare():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getPricePerFullShare(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getPricePerFullShare",
      "getPricePerFullShare():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  available(): BigInt {
    let result = super.call("available", "available():(uint256)", []);

    return result[0].toBigInt();
  }

  try_available(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("available", "available():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOf(): BigInt {
    let result = super.call("balanceOf", "balanceOf():(uint256)", []);

    return result[0].toBigInt();
  }

  try_balanceOf(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _receiptToken(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _masterchef(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _admin(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _treasury(): Address {
    return this._call.inputValues[4].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class DepositCall extends ethereum.Call {
  get inputs(): DepositCall__Inputs {
    return new DepositCall__Inputs(this);
  }

  get outputs(): DepositCall__Outputs {
    return new DepositCall__Outputs(this);
  }
}

export class DepositCall__Inputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }

  get _amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class DepositCall__Outputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }
}

export class WithdrawAllCall extends ethereum.Call {
  get inputs(): WithdrawAllCall__Inputs {
    return new WithdrawAllCall__Inputs(this);
  }

  get outputs(): WithdrawAllCall__Outputs {
    return new WithdrawAllCall__Outputs(this);
  }
}

export class WithdrawAllCall__Inputs {
  _call: WithdrawAllCall;

  constructor(call: WithdrawAllCall) {
    this._call = call;
  }
}

export class WithdrawAllCall__Outputs {
  _call: WithdrawAllCall;

  constructor(call: WithdrawAllCall) {
    this._call = call;
  }
}

export class HarvestCall extends ethereum.Call {
  get inputs(): HarvestCall__Inputs {
    return new HarvestCall__Inputs(this);
  }

  get outputs(): HarvestCall__Outputs {
    return new HarvestCall__Outputs(this);
  }
}

export class HarvestCall__Inputs {
  _call: HarvestCall;

  constructor(call: HarvestCall) {
    this._call = call;
  }
}

export class HarvestCall__Outputs {
  _call: HarvestCall;

  constructor(call: HarvestCall) {
    this._call = call;
  }
}

export class SetAdminCall extends ethereum.Call {
  get inputs(): SetAdminCall__Inputs {
    return new SetAdminCall__Inputs(this);
  }

  get outputs(): SetAdminCall__Outputs {
    return new SetAdminCall__Outputs(this);
  }
}

export class SetAdminCall__Inputs {
  _call: SetAdminCall;

  constructor(call: SetAdminCall) {
    this._call = call;
  }

  get _admin(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetAdminCall__Outputs {
  _call: SetAdminCall;

  constructor(call: SetAdminCall) {
    this._call = call;
  }
}

export class SetTreasuryCall extends ethereum.Call {
  get inputs(): SetTreasuryCall__Inputs {
    return new SetTreasuryCall__Inputs(this);
  }

  get outputs(): SetTreasuryCall__Outputs {
    return new SetTreasuryCall__Outputs(this);
  }
}

export class SetTreasuryCall__Inputs {
  _call: SetTreasuryCall;

  constructor(call: SetTreasuryCall) {
    this._call = call;
  }

  get _treasury(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetTreasuryCall__Outputs {
  _call: SetTreasuryCall;

  constructor(call: SetTreasuryCall) {
    this._call = call;
  }
}

export class SetPerformanceFeeCall extends ethereum.Call {
  get inputs(): SetPerformanceFeeCall__Inputs {
    return new SetPerformanceFeeCall__Inputs(this);
  }

  get outputs(): SetPerformanceFeeCall__Outputs {
    return new SetPerformanceFeeCall__Outputs(this);
  }
}

export class SetPerformanceFeeCall__Inputs {
  _call: SetPerformanceFeeCall;

  constructor(call: SetPerformanceFeeCall) {
    this._call = call;
  }

  get _performanceFee(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetPerformanceFeeCall__Outputs {
  _call: SetPerformanceFeeCall;

  constructor(call: SetPerformanceFeeCall) {
    this._call = call;
  }
}

export class SetCallFeeCall extends ethereum.Call {
  get inputs(): SetCallFeeCall__Inputs {
    return new SetCallFeeCall__Inputs(this);
  }

  get outputs(): SetCallFeeCall__Outputs {
    return new SetCallFeeCall__Outputs(this);
  }
}

export class SetCallFeeCall__Inputs {
  _call: SetCallFeeCall;

  constructor(call: SetCallFeeCall) {
    this._call = call;
  }

  get _callFee(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetCallFeeCall__Outputs {
  _call: SetCallFeeCall;

  constructor(call: SetCallFeeCall) {
    this._call = call;
  }
}

export class SetWithdrawFeeCall extends ethereum.Call {
  get inputs(): SetWithdrawFeeCall__Inputs {
    return new SetWithdrawFeeCall__Inputs(this);
  }

  get outputs(): SetWithdrawFeeCall__Outputs {
    return new SetWithdrawFeeCall__Outputs(this);
  }
}

export class SetWithdrawFeeCall__Inputs {
  _call: SetWithdrawFeeCall;

  constructor(call: SetWithdrawFeeCall) {
    this._call = call;
  }

  get _withdrawFee(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetWithdrawFeeCall__Outputs {
  _call: SetWithdrawFeeCall;

  constructor(call: SetWithdrawFeeCall) {
    this._call = call;
  }
}

export class SetWithdrawFeePeriodCall extends ethereum.Call {
  get inputs(): SetWithdrawFeePeriodCall__Inputs {
    return new SetWithdrawFeePeriodCall__Inputs(this);
  }

  get outputs(): SetWithdrawFeePeriodCall__Outputs {
    return new SetWithdrawFeePeriodCall__Outputs(this);
  }
}

export class SetWithdrawFeePeriodCall__Inputs {
  _call: SetWithdrawFeePeriodCall;

  constructor(call: SetWithdrawFeePeriodCall) {
    this._call = call;
  }

  get _withdrawFeePeriod(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetWithdrawFeePeriodCall__Outputs {
  _call: SetWithdrawFeePeriodCall;

  constructor(call: SetWithdrawFeePeriodCall) {
    this._call = call;
  }
}

export class EmergencyWithdrawCall extends ethereum.Call {
  get inputs(): EmergencyWithdrawCall__Inputs {
    return new EmergencyWithdrawCall__Inputs(this);
  }

  get outputs(): EmergencyWithdrawCall__Outputs {
    return new EmergencyWithdrawCall__Outputs(this);
  }
}

export class EmergencyWithdrawCall__Inputs {
  _call: EmergencyWithdrawCall;

  constructor(call: EmergencyWithdrawCall) {
    this._call = call;
  }
}

export class EmergencyWithdrawCall__Outputs {
  _call: EmergencyWithdrawCall;

  constructor(call: EmergencyWithdrawCall) {
    this._call = call;
  }
}

export class InCaseTokensGetStuckCall extends ethereum.Call {
  get inputs(): InCaseTokensGetStuckCall__Inputs {
    return new InCaseTokensGetStuckCall__Inputs(this);
  }

  get outputs(): InCaseTokensGetStuckCall__Outputs {
    return new InCaseTokensGetStuckCall__Outputs(this);
  }
}

export class InCaseTokensGetStuckCall__Inputs {
  _call: InCaseTokensGetStuckCall;

  constructor(call: InCaseTokensGetStuckCall) {
    this._call = call;
  }

  get _token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class InCaseTokensGetStuckCall__Outputs {
  _call: InCaseTokensGetStuckCall;

  constructor(call: InCaseTokensGetStuckCall) {
    this._call = call;
  }
}

export class PauseCall extends ethereum.Call {
  get inputs(): PauseCall__Inputs {
    return new PauseCall__Inputs(this);
  }

  get outputs(): PauseCall__Outputs {
    return new PauseCall__Outputs(this);
  }
}

export class PauseCall__Inputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class PauseCall__Outputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class UnpauseCall extends ethereum.Call {
  get inputs(): UnpauseCall__Inputs {
    return new UnpauseCall__Inputs(this);
  }

  get outputs(): UnpauseCall__Outputs {
    return new UnpauseCall__Outputs(this);
  }
}

export class UnpauseCall__Inputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class UnpauseCall__Outputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get _shares(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}
